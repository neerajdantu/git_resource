############################################################################
###################Git Configuration########################################
############################################################################

#SYSTEM LEVEL
/etc/gitconfig

git  config --system

#USER LEVEL
~/.gitconfig or ~/.config/git/config

git config --global

#IN PARTICULAR GIT
.git/config

git config --local

#LOCAL OVERRIDES GLOBAL OVERRIDES SYSTEM

#SHOW ALL GIT CONFIG
git config --list --show-origin

#CONFIG IDENTITY
git config --global user.name "neeraj dantu"
git config --gloabl user.email dantuguf14105@gmail.com

#CHECK CONFIG
git config user.name

#CONFIG EDITOR
git config --global core.editor emacs/vim/C:/..


############################################################################
###################Initalize Git in a directory#############################
############################################################################

mkdir git_dir
git init
.
.
.

#GIT ADD ALL FILES CREATED
git add :/

#CREATE GITIGNORE
https://github.com/github/gitignore

#CHECKOUT A BRANCH
git checkout branch-name
git checkout part_of_SHA1


#GIT COMMIT EVERYTHING THAT WAS ADDED
git commit -a -m "commit message"

#CHNAGE GIT COMMIT MESSAGE OR CHANGE COMMIT ITSELF
git commit -m "Iniital commit"
git add filename
git commit --amend -m "Good updated commit"


#STATUS - WHAT ARE MODIFIED AND ADDED FILE STATUS
git status


#DIFFERENCE IN WHAT HAS NOT BEEN STAGED YET
git diff


#DIFFERENCE IN WHAT HAS BEEN STAGED BUT NOT COMMITTED
git diff --staged


#LOG OF ALL COMMITS AND BRANCHES
git log --all --graph --decorate

#LOG OF DIFFS FOR EACH COMMIT
git log --patch -2    (or git log -p -2)

#LOG OF FILE CHANGES
git log --stat

#LOG IN PRETTY
git log --pretty=format:"%h %s" --graph


#LOG OF COMMITS WITH CHANGE IN NUMBER OF USES OF FUNCTION NAME
git log -S function_name


#REMOVE FILE FROM GIT
git rm filename (Already tracked in Git)
git commit -m "message of removal"

git rm -f filename (for removing files that are staged but not tracked)
git rm --cached filename


#REMOVE MULTIPLE FILES
git rm \*.log  (\ needed because git does own expansion after shell. We need to avoid it?)


#MOVE FILE
git mv file_from file_to   (equivalent to mv file_from file_to;git rm file_from;git add file_to)


#UNSTAGE FILE
git reset HEAD filename

#DISCARD CHANGES TO A FILE
git checkout -- filename1 filename2

###########################################################################
####################Git from remote########################################
###########################################################################

#CLONING FROM REMOTE
git clone https://github.com/gitreponame

#WHAT ARE REMOTES ASSOCIATED WITH CURRENT GIT DIRECTORY
git remote

git remote -v


#MORE INFO ON A PARTICULAR REMOTE
git remote show <remote>


#LINK REMOTE REPO TO CURRENT GIT FOLDER
git remote add local_name URL

#CHECKOUT A BRANCH
git checkout branch_name
git checkout part_of_SHA1


# ADD REMOTE REPO TO CURRENT GIT
git add remote short_name URL

#DELETE REMOTE REPO TO CURRENT GIT
git remote remove short_name

#REANME REMOTE REPO THAT WAS ADDED
git remote rename short_name_old short_name_new


#GET DATA FROM REMOTE
git fetch short_name


#GET AND UPDATE DATA FROM SOURCE GIT THAT THE LOCAL REPO TRACKS
git pull


#PUSH CHANGES YOU MADE TO REMOTE (EXAMPLE: GIT PUSH ORIGIN MASTER)
git push <remote> <branch>


########################################################################
############CONNECT YOU LOCAL GIT TO REMOTE REPO########################
########################################################################

git remote add local_name URL

git fetch local_name

git pull local_name master --allow-unrelated-histories

git branch --set-upstream-to=local_name/remote_brach_name

git push




#######################################################################
################TAGGING IN GIT#########################################
#######################################################################


#LIST TAGS
git tag

#LIST TAGS WITH PARTICULAR PATTERN
git tag -l "pattern"


#CREATING A NORMAL TAG
git tag tagging_version


#CREATING AN ANNOTATED TAG
git tag -a tag_version -m "Tag message"


#SHOW INFO ON A TAG
git show tag_version


#TAG A PRTICUAL COMMIT
git tag -a tag_version commit_SHA1

#PUSH TAGS TO REMOTE
git push remote_name tag_name

#PUSH ALL TAGS TO REMOTE
git push remote_name --tags


#DELETE TAGS
git tag -d tag_name

#DELETE TAGS FROM REMOTE
git push remote_name --delete tag_name


#CHECKOUT FROM TAG
git checkout -b new_branch_name tag_name



######################################################################
######################### GIT ALIASES ################################
######################################################################

#CREATE ALIAS FOR A GIT COMMAND
git config --global alias.co checkout
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'

git config --global alias.short_name command_to_replace


######################################################################
###################### BRANCHING IN DETAIL ###########################
######################################################################

#CREATE A NEW BRANCH
git brach new_branch_name


#CHECKOUT THE BRANCH
git checkout new_branch_name


#CREATE AND CHECKOUT NEW BRANCH
git checkout -b new_branch_name


######################################################################
####################### MERGING ######################################
######################################################################


#MERGE A BRANCH INTO MASTER
git checkout master

git merge branch_name_to_merge

__This is a new line just to create a conflict








